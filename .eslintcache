[{"C:\\Users\\User\\Desktop\\FlexSolution\\src\\index.js":"1","C:\\Users\\User\\Desktop\\FlexSolution\\src\\reportWebVitals.js":"2","C:\\Users\\User\\Desktop\\FlexSolution\\src\\App.js":"3","C:\\Users\\User\\Desktop\\FlexSolution\\src\\Map.js":"4","C:\\Users\\User\\Desktop\\FlexSolution\\src\\Modal.js":"5"},{"size":517,"mtime":1608330852624,"results":"6","hashOfConfig":"7"},{"size":375,"mtime":1608330852625,"results":"8","hashOfConfig":"7"},{"size":5369,"mtime":1608475612444,"results":"9","hashOfConfig":"7"},{"size":3471,"mtime":1608476706452,"results":"10","hashOfConfig":"7"},{"size":887,"mtime":1608474803305,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1vudvzr",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\User\\Desktop\\FlexSolution\\src\\index.js",[],["24","25"],"C:\\Users\\User\\Desktop\\FlexSolution\\src\\reportWebVitals.js",[],"C:\\Users\\User\\Desktop\\FlexSolution\\src\\App.js",[],"C:\\Users\\User\\Desktop\\FlexSolution\\src\\Map.js",["26","27"],"import React, {Component} from 'react';\r\nimport {Map, GoogleApiWrapper, Marker, InfoWindow} from 'google-maps-react';\r\nimport Geocode from 'react-geocode';\r\nimport ReactDOM from \"react-dom\";\r\nimport Modal from './Modal';\r\nimport './App.css'\r\nimport './Modal.css';\r\n\r\nGeocode.setApiKey(\"AIzaSyCp0DdA_3fCu67ojmtQUjNahSkwI4NlE-M\");\r\n\r\nclass MapComponent extends Component {\r\n\r\n    lastId = 1;\r\n\r\n    state = {\r\n        activeMarker: null,\r\n        infoWindowOpen: false,\r\n        infoWindow: '',\r\n    };\r\n\r\n    setInfo = (event) => {\r\n        this.setState({\r\n            infoWindow: event.target.value\r\n        });\r\n    };\r\n\r\n    onSave = () => {\r\n        const newMarkers = [...this.props.markers];\r\n        const activeIndex = newMarkers.findIndex(marker => marker.id === this.state.activeMarker.id);\r\n        newMarkers[activeIndex] = {\r\n            ...newMarkers[activeIndex],\r\n            description: this.state.infoWindow,\r\n        };\r\n        this.props.setMarkers(newMarkers);\r\n        this.setState({\r\n            infoWindowOpen: false\r\n        });\r\n    };\r\n\r\n    onClick = (t, map, coord) => {\r\n        const {latLng} = coord;\r\n        const lat = latLng.lat();\r\n        const lng = latLng.lng();\r\n\r\n        this.props.setMarkers([\r\n            ...this.props.markers,\r\n            {\r\n                id: this.lastId,\r\n                position: {lat, lng},\r\n                description: '',\r\n            }]);\r\n        this.lastId++;\r\n    };\r\n\r\n    onMarkerClick = (marker) => {\r\n        this.setState({\r\n            activeMarker: marker,\r\n            infoWindow: marker.description,\r\n            infoWindowOpen: true,\r\n        });\r\n    };\r\n\r\n    windowHasClosed = () => {\r\n        this.setState({infoWindowOpen: false});\r\n        console.log(this.state);\r\n    };\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className={this.props.disabled ? 'small__map': 'map'}>\r\n                <Map\r\n                    google={this.props.google}\r\n                    zoom={15}\r\n                    style={this.props.small ? smallMapStyles : mapStyles}\r\n                    initialCenter={{lat: 41.3275, lng: 19.8187}}\r\n                    onClick={this.props.disabled ? null : this.onClick}\r\n                    zoomControl={false}\r\n                >\r\n                    {this.props.markers.map((marker, index) => (\r\n                        <Marker\r\n                            key={index}\r\n                            position={marker.position}\r\n                            onClick={() => this.onMarkerClick(marker)}>>\r\n                        </Marker>\r\n                    ))}\r\n                </Map>\r\n                <Modal\r\n                    className=\"modal\"\r\n                    close={this.windowHasClosed}\r\n                    add={this.onSave}\r\n                    disabled={this.props.disabled}\r\n                    show={this.state.infoWindowOpen}>\r\n                    Info :\r\n                    <input type=\"text\"\r\n                           disabled={this.props.disabled}\r\n                           value={this.state.infoWindow}\r\n                           onChange={this.setInfo}\r\n                           id=\"Adresa\"/>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStyles = {\r\n    width: '55rem',\r\n    height: '21.5rem'\r\n};\r\n\r\nconst smallMapStyles = {\r\n    width: '100%',\r\n    height: '100%'\r\n};\r\n\r\nexport default GoogleApiWrapper({\r\n    apiKey: 'AIzaSyCp0DdA_3fCu67ojmtQUjNahSkwI4NlE-M'\r\n})(MapComponent);\r\n","C:\\Users\\User\\Desktop\\FlexSolution\\src\\Modal.js",[],{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":2,"column":40,"nodeType":"34","messageId":"35","endLine":2,"endColumn":50},{"ruleId":"32","severity":1,"message":"36","line":4,"column":8,"nodeType":"34","messageId":"35","endLine":4,"endColumn":16},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"no-unused-vars","'InfoWindow' is defined but never used.","Identifier","unusedVar","'ReactDOM' is defined but never used.","no-global-assign","no-unsafe-negation"]